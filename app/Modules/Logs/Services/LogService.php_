<?php

namespace App\Modules\Logs\Services;


class LogService
{
    protected $logFile;
    protected $logsPerPage;

    public function __construct()
    {
        $this->logFile = storage_path('logs/app.log');
        $this->logsPerPage = 15;
    }

    public function getLogs($page)
    {
        $logs = [];
        $logsPerPage = $this->logsPerPage;
        $page = max(1, intval($page));

        if (file_exists($this->logFile)) {
            $lines = file($this->logFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            foreach ($lines as $line) {
                preg_match('/\[(.*?)\] \[(.*?)\] (.*)/', $line, $matches);
                if ($matches) {
                    $logs[] = [
                        'date' => $matches[1],
                        'level' => $matches[2],
                        'message' => $matches[3],
                    ];
                }
            }
            usort($logs, function ($a, $b) {
                return strtotime($b['date']) - strtotime($a['date']);
            });
        }

        // PaginaciÃ³n
        $totalLogs = count($logs);
        $totalPages = ceil($totalLogs / $logsPerPage);
        $startIndex = ($page - 1) * $logsPerPage;
        $paginatedLogs = array_slice($logs, $startIndex, $logsPerPage);

        return compact('paginatedLogs', 'totalPages', 'page');
    }

    public function deleteLogs($selectedLogs, $lines)
    {
        $updatedLines = array_filter($lines, function ($line, $index) use ($selectedLogs) {
            return !in_array($index, $selectedLogs);
        }, ARRAY_FILTER_USE_BOTH);

        file_put_contents($this->logFile, implode(PHP_EOL, $updatedLines) . PHP_EOL);
    }

    public function deleteAllLogs()
    {
        file_put_contents($this->logFile, '');
    }
}
